#!/usr/bin/env python3
"""
Script pour cr√©er la base de donn√©es PostgreSQL pour GestionEDT
"""
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import sys

def create_database():
    """Cr√©er la base de donn√©es PostgreSQL"""
    
    # Param√®tres de connexion
    host = 'localhost'
    port = '5432'
    user = 'postgres'
    password = 'postgres123'
    database_name = 'gestion_edt'
    
    try:
        # Connexion au serveur PostgreSQL (base postgres par d√©faut)
        print("üîå Connexion au serveur PostgreSQL...")
        conn = psycopg2.connect(
            host=host,
            port=port,
            user=user,
            password=password,
            database='postgres'
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # V√©rifier si la base de donn√©es existe d√©j√†
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s", (database_name,))
        exists = cursor.fetchone()
        
        if exists:
            print(f"‚úÖ La base de donn√©es '{database_name}' existe d√©j√†")
        else:
            # Cr√©er la base de donn√©es
            print(f"üèóÔ∏è  Cr√©ation de la base de donn√©es '{database_name}'...")
            cursor.execute(f'CREATE DATABASE "{database_name}"')
            print(f"‚úÖ Base de donn√©es '{database_name}' cr√©√©e avec succ√®s")
        
        cursor.close()
        conn.close()
        
        # Tester la connexion √† la nouvelle base
        print("üîç Test de connexion √† la base de donn√©es...")
        test_conn = psycopg2.connect(
            host=host,
            port=port,
            user=user,
            password=password,
            database=database_name
        )
        test_conn.close()
        print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
        
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå Erreur de connexion PostgreSQL: {e}")
        print("\nüí° Solutions possibles:")
        print("1. V√©rifiez que PostgreSQL est install√© et d√©marr√©")
        print("2. V√©rifiez les param√®tres de connexion (host, port, user, password)")
        print("3. Installez PostgreSQL depuis: https://www.postgresql.org/download/")
        print("4. Ou utilisez Docker: docker run --name postgres -e POSTGRES_PASSWORD=postgres123 -p 5432:5432 -d postgres:15")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Configuration de PostgreSQL pour GestionEDT")
    print("=" * 50)
    
    if create_database():
        print("\nüéâ Configuration PostgreSQL termin√©e avec succ√®s!")
        print("\nüìã Prochaines √©tapes:")
        print("1. cd backend")
        print("2. pip install -r requirements.txt")
        print("3. python manage.py makemigrations")
        print("4. python manage.py migrate")
        print("5. python manage.py createsuperuser")
        print("6. python manage.py runserver")
    else:
        print("\n‚ùå √âchec de la configuration PostgreSQL")
        sys.exit(1)

if __name__ == "__main__":
    main()
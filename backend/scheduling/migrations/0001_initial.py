# Generated by Django 4.2.7 on 2025-09-06 22:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academic', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('start_date', models.DateField(help_text='Date de début de ce cours')),
                ('end_date', models.DateField(help_text='Date de fin de ce cours')),
                ('student_count', models.PositiveIntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('cancellation_reason', models.CharField(blank=True, max_length=500)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Emploi du temps',
                'verbose_name_plural': 'Emplois du temps',
                'db_table': 'schedules',
                'ordering': ['start_date', 'time_slot__day_of_week', 'time_slot__start_time'],
            },
        ),
        migrations.CreateModel(
            name='TimetableGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('RUNNING', 'En cours'), ('COMPLETED', 'Terminée'), ('FAILED', 'Échouée'), ('CANCELLED', 'Annulée')], default='RUNNING', max_length=20)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('parameters', models.JSONField(default=dict, help_text='Paramètres utilisés pour la génération')),
                ('results', models.JSONField(default=dict, help_text='Résultats et statistiques de la génération')),
                ('error_message', models.TextField(blank=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.academicyear')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='academic.department')),
                ('programs', models.ManyToManyField(blank=True, to='academic.program')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Génération d'emploi du temps",
                'verbose_name_plural': "Générations d'emploi du temps",
                'db_table': 'timetable_generations',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('day_of_week', models.IntegerField(choices=[(0, 'Lundi'), (1, 'Mardi'), (2, 'Mercredi'), (3, 'Jeudi'), (4, 'Vendredi'), (5, 'Samedi'), (6, 'Dimanche')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('duration_minutes', models.PositiveIntegerField(blank=True)),
                ('name', models.CharField(blank=True, help_text='Ex: Créneau 1, Matin, etc.', max_length=100)),
            ],
            options={
                'verbose_name': 'Créneau horaire',
                'verbose_name_plural': 'Créneaux horaires',
                'db_table': 'time_slots',
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('day_of_week', 'start_time', 'end_time')},
            },
        ),
        migrations.CreateModel(
            name='TeacherUnavailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('unavailability_type', models.CharField(choices=[('SICK_LEAVE', 'Congé maladie'), ('VACATION', 'Vacances'), ('CONFERENCE', 'Conférence'), ('MEETING', 'Réunion'), ('PERSONAL', 'Personnel'), ('OTHER', 'Autre')], max_length=20)),
                ('reason', models.TextField()),
                ('is_all_day', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unavailabilities', to='users.teacher')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Indisponibilité enseignant',
                'verbose_name_plural': 'Indisponibilités enseignants',
                'db_table': 'teacher_unavailabilities',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_mandatory', models.BooleanField(default=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.program')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduling.schedule')),
            ],
            options={
                'verbose_name': "Programme d'emploi du temps",
                'verbose_name_plural': "Programmes d'emploi du temps",
                'db_table': 'schedule_programs',
                'unique_together': {('schedule', 'program')},
            },
        ),
        migrations.CreateModel(
            name='ScheduleConflict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('conflict_type', models.CharField(choices=[('ROOM_DOUBLE_BOOKING', 'Double réservation de salle'), ('TEACHER_DOUBLE_BOOKING', 'Enseignant sur plusieurs créneaux'), ('STUDENT_GROUP_CONFLICT', "Conflit de groupe d'étudiants"), ('CAPACITY_EXCEEDED', 'Capacité de salle dépassée'), ('TEACHER_UNAVAILABLE', 'Enseignant indisponible')], max_length=30)),
                ('severity', models.CharField(choices=[('LOW', 'Faible'), ('MEDIUM', 'Moyenne'), ('HIGH', 'Élevée'), ('CRITICAL', 'Critique')], default='MEDIUM', max_length=10)),
                ('description', models.TextField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_conflicts', to=settings.AUTH_USER_MODEL)),
                ('schedule1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conflicts_as_first', to='scheduling.schedule')),
                ('schedule2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conflicts_as_second', to='scheduling.schedule')),
            ],
            options={
                'verbose_name': "Conflit d'emploi du temps",
                'verbose_name_plural': "Conflits d'emploi du temps",
                'db_table': 'schedule_conflicts',
                'ordering': ['-severity', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='schedule',
            name='programs',
            field=models.ManyToManyField(through='scheduling.ScheduleProgram', to='academic.program'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='academic.room'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='academic.subject'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='users.teacher'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='time_slot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='scheduling.timeslot'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MakeupSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('proposed_date', models.DateField()),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('APPROVED', 'Approuvée'), ('REJECTED', 'Rejetée'), ('COMPLETED', 'Terminée')], default='PENDING', max_length=20)),
                ('reason', models.TextField(help_text='Raison du rattrapage')),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_makeups', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('original_schedule', models.ForeignKey(help_text='Cours original à rattraper', on_delete=django.db.models.deletion.CASCADE, related_name='makeup_sessions', to='scheduling.schedule')),
                ('proposed_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.room')),
                ('proposed_time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduling.timeslot')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Séance de rattrapage',
                'verbose_name_plural': 'Séances de rattrapage',
                'db_table': 'makeup_sessions',
                'ordering': ['-created_at'],
            },
        ),
    ]
